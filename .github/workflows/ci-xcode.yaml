name: Xcode - CI

on:
  workflow_dispatch:

jobs:
  ui-tests:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure App with Repository Variables
      run: |
        echo "üîß Configuring app with repository variables..."
        # Check if APP_ID variable exists
        if [[ -n "${{ vars.APP_ID }}" ]]; then
          echo "‚úÖ APP_ID found in repository variables: ${{ vars.APP_ID }}"
          # Update the appId in Embrace_EcommerceApp.swift
          echo "üìù Updating appId in Embrace_EcommerceApp.swift..."
          # Use sed to replace the line containing 'appId: SDKConfiguration.Embrace.appId'
          sed -i '' 's/appId: SDKConfiguration\.Embrace\.appId/appId: "${{ vars.APP_ID }}"/g' "Embrace Ecommerce/Embrace_EcommerceApp.swift"
          echo "‚úÖ Updated appId to use repository variable"
          # Show the updated line for verification
          echo "üìã Updated line:"
          grep -n "appId:" "Embrace Ecommerce/Embrace_EcommerceApp.swift" || echo "‚ö†Ô∏è Could not find appId line"
        else
          echo "‚ùå ERROR: APP_ID variable not found in repository variables"
          echo "   Please add APP_ID as a repository variable before running this workflow."
          echo "   Go to Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí Variables tab"
          exit 1
        fi
        echo ""

    - name: Set up Xcode
      run: |
        sudo xcode-select --print-path

    - name: Environment Information
      run: |
        echo "üîß ENVIRONMENT INFORMATION"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üñ•Ô∏è  Runner OS: ${{ runner.os }}"
        echo "üìÖ Date: $(date)"
        echo "üõ†Ô∏è  Xcode Version: $(xcodebuild -version | head -1)"
        echo "üì± Available SDK versions:"
        xcodebuild -showsdks | grep iOS || echo "No iOS SDKs found"
        echo "üîç Simulator runtimes:"
        xcrun simctl list runtimes | grep iOS || echo "No iOS runtimes found"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo ""

    - name: Cache derived data and Swift packages
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-xcode-cache-${{ hashFiles('**/*.xcodeproj/project.pbxproj', '**/*.swift', '**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-xcode-cache-

    - name: Resolve Swift Package dependencies
      run: |
        echo "üì¶ Resolving Swift Package dependencies..."
        xcodebuild -resolvePackageDependencies \
          -scheme "Embrace Ecommerce" \
          -derivedDataPath ~/Library/Developer/Xcode/DerivedData || {
          echo "‚ùå ERROR: Failed to resolve Swift Package dependencies"
          exit 1
        }
        echo "‚úÖ Swift Package dependencies resolved"
        echo ""

    - name: Build for testing (once for all devices)
      run: |
        echo "üîç Discovering available destinations for building..."

        # Show all available destinations first
        echo "üì± All available destinations:"
        xcodebuild -showdestinations -scheme "Embrace Ecommerce" || {
          echo "‚ùå ERROR: Failed to get destinations for scheme 'Embrace Ecommerce'"
          echo "Available schemes:"
          xcodebuild -list
          exit 1
        }

        echo ""
        echo "üéØ Filtering for iOS Simulator destinations..."

        # Get any available iOS simulator for building
        echo "üîç Searching for available simulators..."
        available_destinations=$(xcodebuild -showdestinations -scheme "Embrace Ecommerce" | grep "platform:iOS Simulator")
        echo "Raw destinations found:"
        echo "$available_destinations"
        echo ""

        # Extract a simple iPhone simulator destination
        selected_line=$(echo "$available_destinations" | \
          grep -E "platform:iOS Simulator.*name:iPhone" | \
          head -1)

        if [[ -n "$selected_line" ]]; then
          # Extract each field independently regardless of order
          device_name=$(echo "$selected_line" | sed -n 's/.*name:\([^,}]*\).*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          os_version=$(echo "$selected_line" | sed -n 's/.*OS:\([^,}]*\).*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          platform=$(echo "$selected_line" | sed -n 's/.*platform:\([^,}]*\).*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          # Construct the destination string
          build_destination="platform=${platform},name=${device_name},OS=${os_version}"

          echo "üîç Parsed fields:"
          echo "  Platform: '$platform'"
          echo "  Device: '$device_name'"
          echo "  OS: '$os_version'"
        else
          build_destination=""
        fi

        if [[ -z "$build_destination" ]] || [[ "$build_destination" == *"platform="* && "$build_destination" != *"name="* ]]; then
          echo "‚ùå ERROR: Failed to parse simulator destination"
          echo "No suitable iOS simulator destination found for building"
          exit 1
        fi

        echo "‚úÖ Selected build destination: $build_destination"
        echo ""
        echo "üî® Starting build-for-testing..."
        echo "Command: xcodebuild build-for-testing -scheme 'Embrace Ecommerce' -destination '$build_destination'"
        echo ""

        xcodebuild build-for-testing \
          -scheme "Embrace Ecommerce" \
          -destination "$build_destination" \
          -derivedDataPath ~/Library/Developer/Xcode/DerivedData || {
          echo "‚ùå ERROR: Build failed!"
          exit 1
        }

        echo "‚úÖ Build completed successfully"

    - name: Run UI Tests on multiple devices
      run: |
        echo "üß™ Starting UI Test execution on multiple devices..."
        echo ""

        # Get device info with OS versions
        echo "üîç Discovering iOS simulator devices with OS versions..."

        # Create temp file with device info
        echo "üì± Getting destination list from xcodebuild..."
        xcodebuild -showdestinations -scheme "Embrace Ecommerce" | \
          grep "platform:iOS Simulator" | \
          grep -E "(iPhone|iPad)" | \
          grep -v "Any iOS Simulator Device" > /tmp/device_destinations.txt || {
          echo "‚ùå ERROR: Failed to get device destinations"
          exit 1
        }

        echo "üìù Raw device destinations found:"
        cat /tmp/device_destinations.txt | head -5
        echo "... (showing first 5 entries)"
        echo ""

        # Extract device info and create a simple list
        echo "üîÑ Processing device information..."
        processed_count=0
        while IFS= read -r line; do
          # Extract device name and OS version more carefully
          device_name=$(echo "$line" | sed -n 's/.*name:\([^,}]*\).*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          os_version=$(echo "$line" | sed -n 's/.*OS:\([^,}]*\).*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          # Validate we have both values and device name is iPhone/iPad
          if [[ -n "$device_name" ]] && [[ -n "$os_version" ]] && [[ "$device_name" =~ ^(iPhone|iPad) ]]; then
            # Clean up any quotes or extra spaces
            device_name=$(echo "$device_name" | sed 's/["'"'"']//g')
            os_version=$(echo "$os_version" | sed 's/["'"'"']//g')

            echo "$device_name|$os_version"
            processed_count=$((processed_count + 1))
          fi
        done < /tmp/device_destinations.txt | sort -u -t'|' -k1,1 > /tmp/device_os_list.txt

        echo "‚úÖ Processed $processed_count device entries"
        echo ""

        # Check if we found any devices
        device_count=$(wc -l < /tmp/device_os_list.txt)
        if [[ $device_count -eq 0 ]]; then
          echo "‚ùå ERROR: No valid iOS simulator devices found!"
          echo "Debug info:"
          echo "- Raw destinations file size: $(wc -l < /tmp/device_destinations.txt) lines"
          echo "- Processed devices file size: $(wc -l < /tmp/device_os_list.txt) lines"
          exit 1
        fi

        echo "üì± Available devices with OS versions (found $device_count total):"
        cat /tmp/device_os_list.txt | while IFS='|' read -r device os; do
          echo "  ‚úì $device (OS: $os)"
        done
        echo ""

        # Test on up to 5 devices
        max_devices=5
        actual_test_count=$(( device_count < max_devices ? device_count : max_devices ))
        echo "üéØ Will test on $actual_test_count devices (max: $max_devices)"
        echo ""

        tested_count=0
        failed_count=0
        passed_count=0

        cat /tmp/device_os_list.txt | head -$max_devices | while IFS='|' read -r device os_version; do
          tested_count=$((tested_count + 1))

          # Validate device and OS are not empty
          if [[ -z "$device" ]] || [[ -z "$os_version" ]]; then
            echo "‚ùå ERROR: Empty device name or OS version - skipping"
            echo "  Device: '$device'"
            echo "  OS Version: '$os_version'"
            failed_count=$((failed_count + 1))
            continue
          fi

          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üß™ TEST $tested_count/$actual_test_count: $device (OS: $os_version)"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üì± Device: $device"
          echo "üìä OS Version: $os_version"
          echo "üéØ Target: Embrace EcommerceUITests"
          echo ""

          destination="platform=iOS Simulator,name=$device,OS=$os_version"
          echo "üöÄ Executing: xcodebuild test-without-building with destination: $destination"

          if xcodebuild test-without-building \
            -scheme "Embrace Ecommerce" \
            -destination "$destination" \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
            -only-testing:"Embrace EcommerceUITests"; then
            echo "‚úÖ PASSED: Tests completed successfully on $device"
            passed_count=$((passed_count + 1))
          else
            echo "‚ùå FAILED: Tests failed on $device (OS: $os_version)"
            failed_count=$((failed_count + 1))
            echo "üìù Note: Continuing with remaining devices..."
          fi
          echo ""
        done

        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üìä FINAL RESULTS"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üî¢ Total devices found: $device_count"
        echo "üß™ Devices tested: $actual_test_count"
        echo "‚úÖ Passed: $passed_count"
        echo "‚ùå Failed: $failed_count"
        echo ""

        if [[ $passed_count -gt 0 ]]; then
          echo "üéâ SUCCESS: At least one device passed tests"
        else
          echo "üí• FAILURE: No devices passed tests"
          exit 1
        fi
