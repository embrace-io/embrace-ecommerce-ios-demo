name: Simple CI

on:
  workflow_dispatch:
#  schedule:
#    - cron: '*/20 * * * *'  # Run every 20 minutes

jobs:
  ui-tests:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Xcode
      run: |
        echo "üîß Setting up Xcode..."
        sudo xcode-select --print-path
        echo "‚úÖ Using Xcode at: $(xcode-select --print-path)"
        sudo xcodebuild -license accept 2>/dev/null || echo "License already accepted"

    - name: Inject APP_ID
      run: |
        echo "üîß Injecting APP_ID into code..."
        if [[ -n "${{ vars.APP_ID }}" ]]; then
          echo "‚úÖ APP_ID found: ${{ vars.APP_ID }}"
          sed -i '' 's/appId: SDKConfiguration\.Embrace\.appId/appId: "${{ vars.APP_ID }}"/g' "Embrace Ecommerce/Embrace_EcommerceApp.swift"
          echo "‚úÖ APP_ID injected successfully"
        else
          echo "‚ùå ERROR: APP_ID not found in repository variables"
          exit 1
        fi

    - name: Run UI Tests
      run: |
        echo "üß™ Running UI tests..."

        # Get the first available iPhone simulator
        SIMULATOR_LINE=$(xcrun simctl list devices available | grep "iPhone" | grep -v "unavailable" | head -n 1)
        SIMULATOR_NAME=$(echo "$SIMULATOR_LINE" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*(.*//')
        SIMULATOR_UDID=$(echo "$SIMULATOR_LINE" | grep -o '([A-F0-9-]*[A-F0-9])' | head -n 1 | tr -d '()')

        echo "üì± Selected simulator: $SIMULATOR_NAME"
        echo "üÜî Simulator UDID: $SIMULATOR_UDID"

        xcodebuild test \
          -scheme "Embrace Ecommerce" \
          -destination "platform=iOS Simulator,id=$SIMULATOR_UDID" \
          -only-testing:"Embrace EcommerceUITests/Embrace_EcommerceUITests/testAuthenticationGuestFlow" \
          -allowProvisioningUpdates \
          -skipMacroValidation

        echo "‚úÖ UI tests completed successfully"
