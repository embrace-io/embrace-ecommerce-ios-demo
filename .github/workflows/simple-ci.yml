name: Simple CI

on:
  workflow_dispatch:
#  schedule:
#    - cron: '*/20 * * * *'  # Run every 20 minutes

jobs:
  ui-tests:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Xcode
      run: |
        echo "🔧 Setting up Xcode..."
        sudo xcode-select --print-path
        echo "✅ Using Xcode at: $(xcode-select --print-path)"
        sudo xcodebuild -license accept 2>/dev/null || echo "License already accepted"

    - name: Inject APP_ID
      run: |
        echo "🔧 Injecting APP_ID into code..."
        if [[ -n "${{ vars.APP_ID }}" ]]; then
          echo "✅ APP_ID found: ${{ vars.APP_ID }}"
          sed -i '' 's/appId: SDKConfiguration\.Embrace\.appId/appId: "${{ vars.APP_ID }}"/g' "Embrace Ecommerce/Embrace_EcommerceApp.swift"
          echo "✅ APP_ID injected successfully"
        else
          echo "❌ ERROR: APP_ID not found in repository variables"
          exit 1
        fi

    - name: Prebuild iOS Simulator
      run: |
        echo "🏗️ Prebuilding iOS simulator..."

        # Get the first available iPhone simulator with proper parsing
        SIMULATOR_LINE=$(xcrun simctl list devices available | grep "iPhone" | grep -v "unavailable" | head -n 1)

        echo "📋 Raw simulator line: $SIMULATOR_LINE"

        # Extract name (everything before the opening parenthesis)
        SIMULATOR_NAME=$(echo "$SIMULATOR_LINE" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*(.*//')

        # Extract UDID (UUID between parentheses, before any status)
        SIMULATOR_UDID=$(echo "$SIMULATOR_LINE" | grep -o '([A-F0-9-]*[A-F0-9])' | head -n 1 | tr -d '()')

        echo "📱 Selected simulator: $SIMULATOR_NAME"
        echo "🆔 Simulator UDID: $SIMULATOR_UDID"

        # Validate UDID format
        if [[ ! "$SIMULATOR_UDID" =~ ^[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}$ ]]; then
          echo "❌ ERROR: Invalid UDID format: $SIMULATOR_UDID"
          exit 1
        fi

        # Boot the simulator
        echo "🚀 Booting simulator..."
        xcrun simctl boot "$SIMULATOR_UDID" || echo "Simulator already booted"

        # Wait for simulator to be ready
        echo "⏳ Waiting for simulator to be ready..."
        xcrun simctl bootstatus "$SIMULATOR_UDID" -b

        # Additional wait for simulator services to fully initialize
        echo "⏳ Waiting for simulator services to initialize..."
        sleep 10

        # Verify simulator is actually booted
        BOOT_STATUS=$(xcrun simctl list devices | grep "$SIMULATOR_UDID" | grep -o "Booted" || echo "Not Booted")
        if [[ "$BOOT_STATUS" != "Booted" ]]; then
          echo "❌ ERROR: Simulator failed to boot properly"
          xcrun simctl list devices | grep "$SIMULATOR_UDID"
          exit 1
        fi

        echo "✅ Simulator status: $BOOT_STATUS"

        # Save simulator info for next step
        echo "SIMULATOR_NAME=$SIMULATOR_NAME" >> $GITHUB_ENV
        echo "SIMULATOR_UDID=$SIMULATOR_UDID" >> $GITHUB_ENV

        echo "✅ Simulator prebuilt and ready"

    - name: Build for Testing
      run: |
        echo "🔨 Building for testing on simulator..."
        echo "📱 Simulator: $SIMULATOR_NAME"
        echo "🆔 UDID: $SIMULATOR_UDID"

        xcodebuild build-for-testing \
          -scheme "Embrace Ecommerce" \
          -destination "platform=iOS Simulator,id=$SIMULATOR_UDID" \
          -allowProvisioningUpdates \
          -skipMacroValidation \
          -derivedDataPath ./DerivedData

        echo "✅ Build for testing completed successfully"

    - name: Run UI Tests
      run: |
        echo "🧪 Running UI tests on prebuilt simulator..."
        echo "📱 Simulator: $SIMULATOR_NAME"
        echo "🆔 UDID: $SIMULATOR_UDID"

        xcodebuild test-without-building \
          -scheme "Embrace Ecommerce" \
          -destination "platform=iOS Simulator,id=$SIMULATOR_UDID" \
          -only-testing:"Embrace EcommerceUITests/Embrace_EcommerceUITests/testAuthenticationGuestFlow" \
          -derivedDataPath ./DerivedData

        echo "✅ UI tests completed successfully"
